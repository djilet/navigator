<?php
/**
 * CreateRegistrationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Maximum.CRM.WebApps.CommonIntegration
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;
include 'ModelInterface.php';
/**
 * CreateRegistrationRequest Class Doc Comment
 *
 * @category Class
 * @description Запрос на создание/обновление регистрации
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateRegistrationRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateRegistrationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'first_parent' => '\Swagger\Client\Model\Contact',
'second_parent' => '\Swagger\Client\Model\Contact',
'schoolchild' => '\Swagger\Client\Model\Contact',
'product_code' => 'string',
'event_code' => 'string',
'campaign_code' => 'string',
'city' => 'string',
'territory_code' => 'string',
'issue_year' => 'int',
'additional_info' => 'string',
'gacid' => 'string',
'i_d2015' => 'string',
'registration_type_code' => 'int',
'url_prof_test' => 'string',
'utm' => 'string',
'ut_mcontent' => 'string',
'ut_mterm' => 'string',
'utm_source' => 'string',
'utm_medium' => 'string',
'utm_campaign' => 'string',
'hot_lead' => 'int',
'transaction_code' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'first_parent' => null,
'second_parent' => null,
'schoolchild' => null,
'product_code' => null,
'event_code' => null,
'campaign_code' => null,
'city' => null,
'territory_code' => null,
'issue_year' => 'int32',
'additional_info' => null,
'gacid' => null,
'i_d2015' => null,
'registration_type_code' => 'int32',
'url_prof_test' => null,
'utm' => null,
'ut_mcontent' => null,
'ut_mterm' => null,
'utm_source' => null,
'utm_medium' => null,
'utm_campaign' => null,
'hot_lead' => 'int32',
'transaction_code' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_parent' => 'firstParent',
'second_parent' => 'secondParent',
'schoolchild' => 'schoolchild',
'product_code' => 'productCode',
'event_code' => 'eventCode',
'campaign_code' => 'campaignCode',
'city' => 'city',
'territory_code' => 'territoryCode',
'issue_year' => 'issueYear',
'additional_info' => 'additionalInfo',
'gacid' => 'gacid',
'i_d2015' => 'iD2015',
'registration_type_code' => 'registrationTypeCode',
'url_prof_test' => 'urlProfTest',
'utm' => 'utm',
'ut_mcontent' => 'utMcontent',
'ut_mterm' => 'utMterm',
'utm_source' => 'utmSource',
'utm_medium' => 'utmMedium',
'utm_campaign' => 'utmCampaign',
'hot_lead' => 'hotLead',
'transaction_code' => 'transactionCode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_parent' => 'setFirstParent',
'second_parent' => 'setSecondParent',
'schoolchild' => 'setSchoolchild',
'product_code' => 'setProductCode',
'event_code' => 'setEventCode',
'campaign_code' => 'setCampaignCode',
'city' => 'setCity',
'territory_code' => 'setTerritoryCode',
'issue_year' => 'setIssueYear',
'additional_info' => 'setAdditionalInfo',
'gacid' => 'setGacid',
'i_d2015' => 'setID2015',
'registration_type_code' => 'setRegistrationTypeCode',
'url_prof_test' => 'setUrlProfTest',
'utm' => 'setUtm',
'ut_mcontent' => 'setUtMcontent',
'ut_mterm' => 'setUtMterm',
'utm_source' => 'setUtmSource',
'utm_medium' => 'setUtmMedium',
'utm_campaign' => 'setUtmCampaign',
'hot_lead' => 'setHotLead',
'transaction_code' => 'setTransactionCode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_parent' => 'getFirstParent',
'second_parent' => 'getSecondParent',
'schoolchild' => 'getSchoolchild',
'product_code' => 'getProductCode',
'event_code' => 'getEventCode',
'campaign_code' => 'getCampaignCode',
'city' => 'getCity',
'territory_code' => 'getTerritoryCode',
'issue_year' => 'getIssueYear',
'additional_info' => 'getAdditionalInfo',
'gacid' => 'getGacid',
'i_d2015' => 'getID2015',
'registration_type_code' => 'getRegistrationTypeCode',
'url_prof_test' => 'getUrlProfTest',
'utm' => 'getUtm',
'ut_mcontent' => 'getUtMcontent',
'ut_mterm' => 'getUtMterm',
'utm_source' => 'getUtmSource',
'utm_medium' => 'getUtmMedium',
'utm_campaign' => 'getUtmCampaign',
'hot_lead' => 'getHotLead',
'transaction_code' => 'getTransactionCode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_parent'] = isset($data['first_parent']) ? $data['first_parent'] : null;
        $this->container['second_parent'] = isset($data['second_parent']) ? $data['second_parent'] : null;
        $this->container['schoolchild'] = isset($data['schoolchild']) ? $data['schoolchild'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['event_code'] = isset($data['event_code']) ? $data['event_code'] : null;
        $this->container['campaign_code'] = isset($data['campaign_code']) ? $data['campaign_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['territory_code'] = isset($data['territory_code']) ? $data['territory_code'] : null;
        $this->container['issue_year'] = isset($data['issue_year']) ? $data['issue_year'] : null;
        $this->container['additional_info'] = isset($data['additional_info']) ? $data['additional_info'] : null;
        $this->container['gacid'] = isset($data['gacid']) ? $data['gacid'] : null;
        $this->container['i_d2015'] = isset($data['i_d2015']) ? $data['i_d2015'] : null;
        $this->container['registration_type_code'] = isset($data['registration_type_code']) ? $data['registration_type_code'] : null;
        $this->container['url_prof_test'] = isset($data['url_prof_test']) ? $data['url_prof_test'] : null;
        $this->container['utm'] = isset($data['utm']) ? $data['utm'] : null;
        $this->container['ut_mcontent'] = isset($data['ut_mcontent']) ? $data['ut_mcontent'] : null;
        $this->container['ut_mterm'] = isset($data['ut_mterm']) ? $data['ut_mterm'] : null;
        $this->container['utm_source'] = isset($data['utm_source']) ? $data['utm_source'] : null;
        $this->container['utm_medium'] = isset($data['utm_medium']) ? $data['utm_medium'] : null;
        $this->container['utm_campaign'] = isset($data['utm_campaign']) ? $data['utm_campaign'] : null;
        $this->container['hot_lead'] = isset($data['hot_lead']) ? $data['hot_lead'] : null;
        $this->container['transaction_code'] = isset($data['transaction_code']) ? $data['transaction_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_parent
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getFirstParent()
    {
        return $this->container['first_parent'];
    }

    /**
     * Sets first_parent
     *
     * @param \Swagger\Client\Model\Contact $first_parent first_parent
     *
     * @return $this
     */
    public function setFirstParent($first_parent)
    {
        $this->container['first_parent'] = $first_parent;

        return $this;
    }

    /**
     * Gets second_parent
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getSecondParent()
    {
        return $this->container['second_parent'];
    }

    /**
     * Sets second_parent
     *
     * @param \Swagger\Client\Model\Contact $second_parent second_parent
     *
     * @return $this
     */
    public function setSecondParent($second_parent)
    {
        $this->container['second_parent'] = $second_parent;

        return $this;
    }

    /**
     * Gets schoolchild
     *
     * @return \Swagger\Client\Model\Contact
     */
    public function getSchoolchild()
    {
        return $this->container['schoolchild'];
    }

    /**
     * Sets schoolchild
     *
     * @param \Swagger\Client\Model\Contact $schoolchild schoolchild
     *
     * @return $this
     */
    public function setSchoolchild($schoolchild)
    {
        $this->container['schoolchild'] = $schoolchild;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code Код Бренда в crm
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets event_code
     *
     * @return string
     */
    public function getEventCode()
    {
        return $this->container['event_code'];
    }

    /**
     * Sets event_code
     *
     * @param string $event_code Код Мероприятия в crm
     *
     * @return $this
     */
    public function setEventCode($event_code)
    {
        $this->container['event_code'] = $event_code;

        return $this;
    }

    /**
     * Gets campaign_code
     *
     * @return string
     */
    public function getCampaignCode()
    {
        return $this->container['campaign_code'];
    }

    /**
     * Sets campaign_code
     *
     * @param string $campaign_code Код кампании в CRM
     *
     * @return $this
     */
    public function setCampaignCode($campaign_code)
    {
        $this->container['campaign_code'] = $campaign_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Населенный пункт
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets territory_code
     *
     * @return string
     */
    public function getTerritoryCode()
    {
        return $this->container['territory_code'];
    }

    /**
     * Sets territory_code
     *
     * @param string $territory_code Код территории
     *
     * @return $this
     */
    public function setTerritoryCode($territory_code)
    {
        $this->container['territory_code'] = $territory_code;

        return $this;
    }

    /**
     * Gets issue_year
     *
     * @return int
     */
    public function getIssueYear()
    {
        return $this->container['issue_year'];
    }

    /**
     * Sets issue_year
     *
     * @param int $issue_year Год выпуска
     *
     * @return $this
     */
    public function setIssueYear($issue_year)
    {
        $this->container['issue_year'] = $issue_year;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param string $additional_info Дополнительная информация
     *
     * @return $this
     */
    public function setAdditionalInfo($additional_info)
    {
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets gacid
     *
     * @return string
     */
    public function getGacid()
    {
        return $this->container['gacid'];
    }

    /**
     * Sets gacid
     *
     * @param string $gacid GACID
     *
     * @return $this
     */
    public function setGacid($gacid)
    {
        $this->container['gacid'] = $gacid;

        return $this;
    }

    /**
     * Gets i_d2015
     *
     * @return string
     */
    public function getID2015()
    {
        return $this->container['i_d2015'];
    }

    /**
     * Sets i_d2015
     *
     * @param string $i_d2015 id2015
     *
     * @return $this
     */
    public function setID2015($i_d2015)
    {
        $this->container['i_d2015'] = $i_d2015;

        return $this;
    }

    /**
     * Gets registration_type_code
     *
     * @return int
     */
    public function getRegistrationTypeCode()
    {
        return $this->container['registration_type_code'];
    }

    /**
     * Sets registration_type_code
     *
     * @param int $registration_type_code Тип регистрации (служебное)
     *
     * @return $this
     */
    public function setRegistrationTypeCode($registration_type_code)
    {
        $this->container['registration_type_code'] = $registration_type_code;

        return $this;
    }

    /**
     * Gets url_prof_test
     *
     * @return string
     */
    public function getUrlProfTest()
    {
        return $this->container['url_prof_test'];
    }

    /**
     * Sets url_prof_test
     *
     * @param string $url_prof_test URL для профтеста
     *
     * @return $this
     */
    public function setUrlProfTest($url_prof_test)
    {
        $this->container['url_prof_test'] = $url_prof_test;

        return $this;
    }

    /**
     * Gets utm
     *
     * @return string
     */
    public function getUtm()
    {
        return $this->container['utm'];
    }

    /**
     * Sets utm
     *
     * @param string $utm UTM
     *
     * @return $this
     */
    public function setUtm($utm)
    {
        $this->container['utm'] = $utm;

        return $this;
    }

    /**
     * Gets ut_mcontent
     *
     * @return string
     */
    public function getUtMcontent()
    {
        return $this->container['ut_mcontent'];
    }

    /**
     * Sets ut_mcontent
     *
     * @param string $ut_mcontent UTMcontent
     *
     * @return $this
     */
    public function setUtMcontent($ut_mcontent)
    {
        $this->container['ut_mcontent'] = $ut_mcontent;

        return $this;
    }

    /**
     * Gets ut_mterm
     *
     * @return string
     */
    public function getUtMterm()
    {
        return $this->container['ut_mterm'];
    }

    /**
     * Sets ut_mterm
     *
     * @param string $ut_mterm UTMterm
     *
     * @return $this
     */
    public function setUtMterm($ut_mterm)
    {
        $this->container['ut_mterm'] = $ut_mterm;

        return $this;
    }

    /**
     * Gets utm_source
     *
     * @return string
     */
    public function getUtmSource()
    {
        return $this->container['utm_source'];
    }

    /**
     * Sets utm_source
     *
     * @param string $utm_source UTMSource
     *
     * @return $this
     */
    public function setUtmSource($utm_source)
    {
        $this->container['utm_source'] = $utm_source;

        return $this;
    }

    /**
     * Gets utm_medium
     *
     * @return string
     */
    public function getUtmMedium()
    {
        return $this->container['utm_medium'];
    }

    /**
     * Sets utm_medium
     *
     * @param string $utm_medium UTMMedium
     *
     * @return $this
     */
    public function setUtmMedium($utm_medium)
    {
        $this->container['utm_medium'] = $utm_medium;

        return $this;
    }

    /**
     * Gets utm_campaign
     *
     * @return string
     */
    public function getUtmCampaign()
    {
        return $this->container['utm_campaign'];
    }

    /**
     * Sets utm_campaign
     *
     * @param string $utm_campaign UTMCampaign
     *
     * @return $this
     */
    public function setUtmCampaign($utm_campaign)
    {
        $this->container['utm_campaign'] = $utm_campaign;

        return $this;
    }

    /**
     * Gets hot_lead
     *
     * @return int
     */
    public function getHotLead()
    {
        return $this->container['hot_lead'];
    }

    /**
     * Sets hot_lead
     *
     * @param int $hot_lead Актуальность лида
     *
     * @return $this
     */
    public function setHotLead($hot_lead)
    {
        $this->container['hot_lead'] = $hot_lead;

        return $this;
    }

    /**
     * Gets transaction_code
     *
     * @return string
     */
    public function getTransactionCode()
    {
        return $this->container['transaction_code'];
    }

    /**
     * Sets transaction_code
     *
     * @param string $transaction_code Код транзакции в случае оплаты
     *
     * @return $this
     */
    public function setTransactionCode($transaction_code)
    {
        $this->container['transaction_code'] = $transaction_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
